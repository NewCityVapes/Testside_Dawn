<!doctype html>
<html>
<head>
  <title>Dynamic Vape Comparison</title>
  <style>
    /* Style for the page and components */
    body {
      font-family: Arial, sans-serif;
    }
    h1 {
      text-align: center;  /* Center-align the main title */
      margin: 20px auto;   /* Adds space above and below the title */
    }
    .dropdown-container {
      display: flex;
      justify-content: center;  /* Centers dropdowns horizontally */
      align-items: center;      /* Aligns dropdowns vertically */
      width: 70%;
      margin: 0 auto;           /* Centers container on the page */
    }
    .dropdown-wrapper {
      text-align: center;
      width: 45%;               /* Sets the width of each dropdown area */
    }
    .dropdown {
      text-align: center;
      width: 100%;              /* Full width dropdown */
      font-size: 16px;
      background-color: white;
      color: #454040;
      border: 1px solid #e5e5e5; /* Light grey border around the dropdown */
    }
    .image-container {
      text-align: center;
      margin: 10px auto;         /* Adds spacing around the image */
    }
    .dropdown-image {
      width: 50%;                /* Sets the image width to 50% of the container */
      height: auto;
    }
    .comparison-header {
      text-align: center;
      margin: 20px 0;
    }
    .buy-link {
      font-weight: bold;
      font-size: 18px;
      color: #cb9d64;
      text-align: center;
      cursor: pointer;            /* Changes cursor to pointer on hover */
    }
    .buy-link a {
      font-weight: bold;
      font-size: 22px;
      color: #cb9d64;
      text-decoration: none;       /* Removes underline from the link */
    }
    .buy-link a:hover {
      color: #a47c4b;              /* Changes color on hover */
    }
  </style>
</head>
<body>
  <h1>Disposable Vape Comparison Tool</h1>

  <!-- Main container holding the two dropdowns -->
  <div class="dropdown-container">
    <!-- First dropdown for selecting the first vape -->
    <div class="dropdown-wrapper">
      <select id="dispo1" class="dropdown">
        <!-- Loop through 'DISPOSABLES' collection and create options for each product -->
        {% for product in collections['DISPOSABLES'].products %}
          <option value="{{ product.handle }}">{{ product.vendor }}</option>
        {% endfor %}
      </select>
      <!-- Image container for the first selected vape -->
      <div class="image-container">
        <img id="image1" class="dropdown-image" src="" alt="Selected Vape Image">
      </div>
      <!-- Link to buy the first selected vape -->
      <div class="buy-link" id="buy-link1"></div>
    </div>

    <div class="comparison-header">VS</div>

    <!-- Second dropdown for selecting the second vape -->
    <div class="dropdown-wrapper">
      <select id="dispo2" class="dropdown">
        {% for product in collections['DISPOSABLES'].products %}
          <option value="{{ product.handle }}">{{ product.title }}</option>
        {% endfor %}
      </select>
      <!-- Image container for the second selected vape -->
      <div class="image-container">
        <img id="image2" class="dropdown-image" src="" alt="Selected Vape Image">
      </div>
      <!-- Link to buy the second selected vape -->
      <div class="buy-link" id="buy-link2"></div>
    </div>
  </div>

  <!-- JavaScript for handling dynamic updates based on dropdown selection -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // References to the dropdowns
      const dispo1Dropdown = document.getElementById('dispo1');
      const dispo2Dropdown = document.getElementById('dispo2');

      /**
       * Function to update the product details (image and buy link)
       * when a new product is selected from the dropdown.
       *
       * @param {string} dropdownId - The ID of the dropdown (dispo1 or dispo2).
       * @param {string} imageId - The ID of the image element to update.
       * @param {string} buyLinkId - The ID of the buy link element to update.
       */
      function updateProductDetails(dropdownId, imageId, buyLinkId) {
        // Get the selected product handle from the dropdown
        const selectedHandle = document.getElementById(dropdownId).value;
        const image = document.getElementById(imageId);
        const buyLink = document.getElementById(buyLinkId);

        // Fetch product data based on the selected handle
        fetch(`/products/${selectedHandle}.js`)
          .then(response => response.json())  // Parse the JSON response
          .then(data => {
          console.log('Product data:', data);  // Log the product data to inspect it
            console.log('Product images:', data.images);
    const productImages = data.images;  // Get the images array
            
   // Check if the images array has at least one image
   if (productImages && productImages.length > 0 && productImages[0].src) {
        image.src = productImages[0].src;
      } else {
        console.error('No valid images found for this product.');
      }
            // Update the buy link (not fully implemented in this example)
            buyLink.innerHTML = `<a href="/products/${selectedHandle}">Buy Now</a>`;
          })
          .catch(error => console.error('Error fetching product data:', error));  // Log any errors
      }

      // Event listeners for dropdown changes
      dispo1Dropdown.addEventListener('change', () => updateProductDetails('dispo1', 'image1', 'buy-link1'));
      dispo2Dropdown.addEventListener('change', () => updateProductDetails('dispo2', 'image2', 'buy-link2'));

      // Automatically populate product details for the first options in the dropdowns
      if (dispo1Dropdown.options.length > 0) {
        updateProductDetails('dispo1', 'image1', 'buy-link1');
      }
      if (dispo2Dropdown.options.length > 0) {
        updateProductDetails('dispo2', 'image2', 'buy-link2');
      }
    });
  </script>
</body>
</html>